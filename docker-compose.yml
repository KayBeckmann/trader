services:
  postgres:
    image: postgres:13-alpine
    container_name: trader_postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./data/postgres_data:/var/lib/postgresql/data/
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - trader_net

  redis:
    image: redis:7-alpine
    container_name: trader_redis
    restart: always
    networks:
      - trader_net

  data-fetcher:
    container_name: trader_data_fetcher
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -u run.py data-fetcher
    restart: always
    volumes:
      - ./backend:/app
      - ./stocks.txt:/app/stocks.txt
    depends_on:
      - postgres
      - redis
    networks:
      - trader_net
    env_file:
      - .env

  trainer:
    container_name: trader_trainer
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -u run.py trainer
    restart: always
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - trader_net
    env_file:
      - .env

  api-server:
    container_name: trader_api_server
    build: ./backend
    command: python -u run.py api-server
    restart: always
    ports:
      - "${BACKEND_PORT}:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - trader_net
    env_file:
      - .env

  knn-worker:
    container_name: trader_knn_worker
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -u run.py knn-worker
    restart: always
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - trader_net
    env_file:
      - .env

  trader:
    container_name: trader_trader
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -u run.py trader
    restart: always
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
    networks:
      - trader_net
    env_file:
      - .env

  remove-stocks-worker:
    container_name: trader_remove_stocks_worker
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: python -u run.py remove-stocks-worker
    restart: always
    volumes:
      - ./backend:/app
      - ./stocks.txt:/app/stocks.txt
      - ./keineDaten.md:/app/keineDaten.md
    depends_on:
      - postgres
      - redis
    networks:
      - trader_net
    env_file:
      - .env

  frontend:
    container_name: trader_frontend
    build: ./frontend
    restart: always
    ports:
      - "${FRONTEND_PORT}:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-server
      - data-fetcher
    networks:
      - trader_net
    env_file:
      - .env

networks:
  trader_net:
    driver: bridge

volumes:
  postgres_data:
